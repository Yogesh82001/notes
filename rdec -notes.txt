 data type's
primitive  static memory allocation
non primitive dynamic memoryallocation
skilrisers
brainmentor
   

   string buffer - 16 character by default
  stringbuffer sb = new StringBuffer("hello");/ len 5 + capicity 21
  total capicity =16+5=21
  sb.append("how are youbi am fine thank u");
  length =34
  capacity =44
  length > capacity 
  new capacity = old capacity *2+2
  if again capicity < length then capacitiy is equal to length

  java - oops,ooad,solid,dry,god,exception handling,file io, networking , db,threads,gui
  outcome: one project
  dsa
  dbms
  networking
  os

  data type's
primitive  static memory allocation
non primitive dynamic memoryallocation
skilrisers
brainmentor
  dsa problem solution - iterative , recursive 
  
  list of problems:
   num=97854-> even place (luckey number problem)
                          (even position+even position )%9=0
                          reverce of nuber 
                          rotate a nummber num =12345,r=2,num=45123
                          prime no  (1 to n )
                          armstrong  (no 1 to n  )
question solution 

  
  
  
  
  
  
 /* //problem 1 ->Rotate a number
 public static void rotateNumber() {
        int num = 69785;
        int count = Problem.countDigit(num); 
        int rt = -7;
        if(rt >= 0 ){
            while (rt>count) {
                rt -= count;
            }
            int divisor = (int) Math.pow(10, rt);
            int newnumber = num%divisor;
            num/=divisor;
            int copy = num;
            newnumber = newnumber*(int) Math.pow(10, Problem.countDigit(copy)) + num;
            System.out.println(newnumber);
        }
        else{
            rt = -rt;
            while (rt>count) {
                rt -= count;
            }
            int divisor = (int) Math.pow(10, count-rt);
            int newnumber = num/divisor;
            num%=divisor;
            newnumber = num*(int) Math.pow(10, Problem.countDigit(newnumber)) + newnumber;
            System.out.println(newnumber);
        }
        
    }*/
  
  
 /* //problem 2 -> lucky number
  public static void luckyNumber() {
        int number = 565152652646;
        int copy = number;
        int count = Problem.countDigit(number);
        int sum = 0;
        for(int i=count;i>0;i--){
                if(i%2==0){
                   sum +=copy%10;
                   copy /=10; 
                }
                else{
                copy /=10;     
                }
        }
        if (sum%9==0) {
            System.out.println("number is lucky");
            
        }
        else{
            System.out.println("not lucky");
        }
    }*/
	
	
	
/* //problem 3 -> Reverse a number
	import java.util.Scanner;  
public class ReverseNumberExample3  
{  
 
public static void reverseNumber(int number)   
{  
if (number < 10)   
{  

System.out.println(number);  
return;  
}  
else   
{  
System.out.print(number % 10);  
reverseNumber(number/10);  
}  
}  
public static void main(String args[])  
{  
System.out.print("Enter the number that you want to reverse: ");  
Scanner sc = new Scanner(System.in);  
int num = sc.nextInt();  
System.out.print("The reverse of the given number is: ");    
reverseNumber(num);  
}  
}*/



 /* //problem 4 -> prime number
public class PrimeExample{    
 public static void main(String args[]){    
  int i,m=0,flag=0;      
  int n=3;//it is number to be check   
  m=n/2;      
  if(n==0||n==1){  
   System.out.println(n+" is not prime number");      
  }else{  
   for(i=2;i<=m;i++){      
    if(n%i==0){      
     System.out.println(n+" is not prime number");      
     flag=1;      
     break;      
    }      
   }      
   if(flag==0)  { 
   System.out.println(n+" is prime number"); }  
  } 
}    
}*/




/* //problem 5 -> Armstrong number
import java.util.Scanner;  
import java.lang.Math;  
public class ArmstsrongNumberExample  
{  
  
static boolean isArmstrong(int n)   
{   
int temp, digits=0, last=0, sum=0;   
  
temp=n;   
 
while(temp>0)    
{   
temp = temp/10;   
digits++;   
}   
temp = n;   
while(temp>0)   
{   
      
last = temp % 10;   

sum +=  (Math.pow(last, digits));   
   
temp = temp/10;   
}  
  
if(n==sum)   
 
return true;      
 
else return false;   
}   
 
public static void main(String args[])     
{     
int num;   
Scanner sc= new Scanner(System.in);  
System.out.print("Enter the limit: ");    
num=sc.nextInt();  
System.out.println("Armstrong Number up to "+ num + " are: ");  
for(int i=0; i<=num; i++)  
if(isArmstrong(i))   
System.out.print(i+ ", ");  //prints the armstrong numbers 
}   
} */




12/10/22 by Ravi sir 

take input in java 
system - .in     .out     . err
buffer - chunks of data
steam - flow of data 


  
  
  
  
  
  //Rotate a number
 public static void rotateNumber() {
        int num = 12345;
        int count = Problem.countDigit(num); 
        int rt = -7;
        if(rt >= 0 ){
            while (rt>count) {
                rt -= count;
            }
            int divisor = (int) Math.pow(10, rt);
            int newnumber = num%divisor;
            num/=divisor;
            int copy = num;
            newnumber = newnumber*(int) Math.pow(10, Problem.countDigit(copy)) + num;
            System.out.println(newnumber);
        }
        else{
            rt = -rt;
            while (rt>count) {
                rt -= count;
            }
            int divisor = (int) Math.pow(10, count-rt);
            int newnumber = num/divisor;
            num%=divisor;
            newnumber = num*(int) Math.pow(10, Problem.countDigit(newnumber)) + newnumber;
            System.out.println(newnumber);
        }
        
    }
  
  
  // lucky number
  public static void luckyNumber() {
        int number = 412345678;
        int copy = number;
        int count = Problem.countDigit(number);
        int sum = 0;
        for(int i=count;i>0;i--){
                if(i%2==0){
                   sum +=copy%10;
                   copy /=10; 
                }
                else{
                copy /=10;     
                }
        }
        if (sum%9==0) {
            System.out.println("number is lucky");
            
        }
        else{
            System.out.println("not lucky");
        }
    }
	
	
	
	// Reverse a number
	import java.util.Scanner;  
public class ReverseNumberExample3  
{  
 
public static void reverseNumber(int number)   
{  
if (number < 10)   
{  

System.out.println(number);  
return;  
}  
else   
{  
System.out.print(number % 10);  
reverseNumber(number/10);  
}  
}  
public static void main(String args[])  
{  
System.out.print("Enter the number that you want to reverse: ");  
Scanner sc = new Scanner(System.in);  
int num = sc.nextInt();  
System.out.print("The reverse of the given number is: ");    
reverseNumber(num);  
}  
}



// prime number
public class PrimeExample{    
 public static void main(String args[]){    
  int i,m=0,flag=0;      
  int n=3;//it is number to be check   
  m=n/2;      
  if(n==0||n==1){  
   System.out.println(n+" is not prime number");      
  }else{  
   for(i=2;i<=m;i++){      
    if(n%i==0){      
     System.out.println(n+" is not prime number");      
     flag=1;      
     break;      
    }      
   }      
   if(flag==0)  { 
   System.out.println(n+" is prime number"); }  
  } 
}    
}




// Armstrong number
import java.util.Scanner;  
import java.lang.Math;  
public class ArmstsrongNumberExample  
{  
  
static boolean isArmstrong(int n)   
{   
int temp, digits=0, last=0, sum=0;   
  
temp=n;   
 
while(temp>0)    
{   
temp = temp/10;   
digits++;   
}   
temp = n;   
while(temp>0)   
{   
      
last = temp % 10;   

sum +=  (Math.pow(last, digits));   
   
temp = temp/10;   
}  
  
if(n==sum)   
 
return true;      
 
else return false;   
}   
 
public static void main(String args[])     
{     
int num;   
Scanner sc= new Scanner(System.in);  
System.out.print("Enter the limit: ");    
num=sc.nextInt();  
System.out.println("Armstrong Number up to "+ num + " are: ");  
for(int i=0; i<=num; i++)  
if(isArmstrong(i))   
System.out.print(i+ ", ");  //prints the armstrong numbers 
}   
}

partten -----------------------------------------
 most basic partten 
*****
*****
*****
*****
*****
for(i=0;i<5;i++){
    for(j=0;j<5;j++){
        System.out.print("*");
    }
    System.out.println();
}
 

01234
01234
01234
01234
01234

        





data type's
primitive  static memory allocation
non primitive dynamic memoryallocation
skilrisers
brainmentor
  
  
  
  
  
  
  //Rotate a number
 public static void rotateNumber() {
        int num = 12345;
        int count = Problem.countDigit(num); 
        int rt = -7;
        if(rt >= 0 ){
            while (rt>count) {
                rt -= count;
            }
            int divisor = (int) Math.pow(10, rt);
            int newnumber = num%divisor;
            num/=divisor;
            int copy = num;
            newnumber = newnumber*(int) Math.pow(10, Problem.countDigit(copy)) + num;
            System.out.println(newnumber);
        }
        else{
            rt = -rt;
            while (rt>count) {
                rt -= count;
            }
            int divisor = (int) Math.pow(10, count-rt);
            int newnumber = num/divisor;
            num%=divisor;
            newnumber = num*(int) Math.pow(10, Problem.countDigit(newnumber)) + newnumber;
            System.out.println(newnumber);
        }
        
    }
  
  
  // lucky number
  public static void luckyNumber() {
        int number = 412345678;
        int copy = number;
        int count = Problem.countDigit(number);
        int sum = 0;
        for(int i=count;i>0;i--){
                if(i%2==0){
                   sum +=copy%10;
                   copy /=10; 
                }
                else{
                copy /=10;     
                }
        }
        if (sum%9==0) {
            System.out.println("number is lucky");
            
        }
        else{
            System.out.println("not lucky");
        }
    }
	
	
	
	// Reverse a number
	import java.util.Scanner;  
public class ReverseNumberExample3  
{  
 
public static void reverseNumber(int number)   
{  
if (number < 10)   
{  

System.out.println(number);  
return;  
}  
else   
{  
System.out.print(number % 10);  
reverseNumber(number/10);  
}  
}  
public static void main(String args[])  
{  
System.out.print("Enter the number that you want to reverse: ");  
Scanner sc = new Scanner(System.in);  
int num = sc.nextInt();  
System.out.print("The reverse of the given number is: ");    
reverseNumber(num);  
}  
}



// prime number
public class PrimeExample{    
 public static void main(String args[]){    
  int i,m=0,flag=0;      
  int n=3;//it is number to be check   
  m=n/2;      
  if(n==0||n==1){  
   System.out.println(n+" is not prime number");      
  }else{  
   for(i=2;i<=m;i++){      
    if(n%i==0){      
     System.out.println(n+" is not prime number");      
     flag=1;      
     break;      
    }      
   }      
   if(flag==0)  { 
   System.out.println(n+" is prime number"); }  
  } 
}    
}




// Armstrong number
import java.util.Scanner;  
import java.lang.Math;  
public class ArmstsrongNumberExample  
{  
  
static boolean isArmstrong(int n)   
{   
int temp, digits=0, last=0, sum=0;   
  
temp=n;   
 
while(temp>0)    
{   
temp = temp/10;   
digits++;   
}   
temp = n;   
while(temp>0)   
{   
      
last = temp % 10;   

sum +=  (Math.pow(last, digits));   
   
temp = temp/10;   
}  
  
if(n==sum)   
 
return true;      
 
else return false;   
}   
 
public static void main(String args[])     
{     
int num;   
Scanner sc= new Scanner(System.in);  
System.out.print("Enter the limit: ");    
num=sc.nextInt();  
System.out.println("Armstrong Number up to "+ num + " are: ");  
for(int i=0; i<=num; i++)  
if(isArmstrong(i))   
System.out.print(i+ ", ");  //prints the armstrong numbers 
}   
}





*******************2/11/2022**************************
DSA--->>

leetcode-->> coding website



recursion -->>
- call stack 
- local variables memory initialization
- return statement working
____________________________________
call stack is mention fuction call 
____________________________________
recursion - process calling itself
- breaking of large problem into same type of smaller problem and stop the termintion with the help of base case and terminating case
typr of recurion->
tail
head
liner
recursion cotain ->
base case 
small problem
processing logic 
 
 power of a number-->>
 
 package homeworkrdec;

import java.util.Scanner;

public class rcursionq {
    // POWER OF ANY NUMBER ------->>>>>>>>>
    static int power(int base,int pow){
        if(pow==0){// base case
            return 1;

        }
        return(base*power(base,pow-1));//small problem 

    }
    public static void main(String[]args){
        System.out.println("Enter the value of number and power :");
        Scanner sc=new Scanner(System.in);
        int base=sc.nextInt();
        int pow=sc.nextInt();
        System.out.println("Required power is :"+power(base,pow));//call
        

    }
    }
 count zero in a digits----->>>>

 package homeworkrdec;

import java.util.Scanner;

public class countzero {
    static int countZerosRec(int input){
		if(input==0) //Just to handle the case when input=0 
		{
			return 1;
		}
		if(input<10)//this is the actual base case
		{
			return 0;			
		}
		else if(input%10==0)
		{
			return 1+countZerosRec(input/10);//small problem
		}
		return countZerosRec(input/10);// small problem

	}
    

        public static void main(String[] args) {
            System.out.println("Enter the Digit :");
            Scanner sc= new Scanner(System.in);
            int input=sc.nextInt();
            System.out.println(countZerosRec(input));//call

    
        }
    
}


 sum of a digit ----->>

 package homeworkrdec;

import java.util.Scanner;

public class sumofdigit {
    static int sum_of_digit(int n)
    {
        if (n == 0){
            return 0;
        }
        return (n % 10 + sum_of_digit(n / 10));
    }

    public static void main(String args[])
    {
        System.out.println("enter the digit :");
        Scanner sc=new Scanner(System.in);
        int num=sc.nextInt();
        int result = sum_of_digit(num);
        System.out.println("Sum of digits in " +num + " is " + result);
    }
    
}

reverse a string ---->>>

sting str = hello world
o/p  dlrow olleh 
code->> package rdecjava;
code-->>
public class dsa {
static String reverse(String str){
    // base case
    if(str.length()==1){
        return str;
    }
    return reverse(str.substring(1))+str.charAt(0);



   }
   public static void main(String[]args){
    String str="Hello world";
    String revStr = reverse(str);
    System.out.println(revStr);

   }
   single recursion
   multiple recursion
   fibonnaci serice->>0,1,1,2,3,5,8,13............

   code->
   static int fib(int n){
    if(n<=1){
        return n;



    }
    int first=fib(n-1);
    int second=fib(n-2);
    int res=first+second;
    return res;

   }
   public static void main(String[]args){
    int n=fib(5);
    System.out.println(n);}
home work
//check array is sorted or not---->>>

'package homeworkrdec;

import java.util.Arrays;
import java.util.Scanner;

public class checkarraysorted {
    private static boolean isSortedArray(int[] array, int n){
        if(n == 1 || n == 0) return true;
        return array[n-2] <= array[n-1] && isSortedArray(array, n-1);
    }

    
    public static void main(String[] args) {
        System.out.println("Enter the required size of the array :: ");
      Scanner s = new Scanner(System.in);
      int size = s.nextInt();
      int arr[] = new int [size];
      System.out.println("Enter the elements of the array one by one ");
      for(int i=0; i<size; i++) {
         arr[i] = s.nextInt();
      }
      System.out.println("Contents of the array are: "+Arrays.toString(arr));
        
        System.out.println("The array " + Arrays.toString(arr) + " " + (isSortedArray(arr, arr.length)?"is":"is not") + " sorted.");
        System.out.println("--------");
        System.out.println("The array " + Arrays.toString(arr) + " " + (isSortedArray(arr, arr.length)?"is":"is not") + " sorted.");

    }
    
}
  partten by recurion--->>>
   
   1.
          *
          **
          ***
          ****
          *****

          code---->>

          package homeworkrdec;

import java.util.Scanner;

public class partten1usingrecursion {
    


     
// function to print a row
static void printn(int num)
{
    // base case
    if (num == 0)
        return;
    System.out.print ("* ");
 
    //  calling 
    printn(num - 1);
}
 
// function to print the pattern
static void pattern(int n, int i)
{
    // base case
    if (n == 0)
        return;
    printn(i);
    System.out.println();
 
    // recursively calling pattern()
    pattern(n - 1, i + 1);
}
 

public static void main (String[] args)
{
 System.out.println("enter the values of row for creating partten : ");
 Scanner sc=new Scanner(System.in);
 int n = sc.nextInt();
    pattern(n, 1);
}
    
}


    2.  
            *****
            ****
            ***
            **
            *

            code---->>

            package homeworkrdec;

import java.util.Scanner;

public class partten2byusingrecursion {
    // function to print a row
static void printn(int num)
{
    // base case
    if (num == 0)
        return;
    System.out.print ("* ");
 
    //  calling 
    printn(num - 1);
}
 
// function to print the pattern
static void pattern(int n, int i)
{
    // base case
    if (n == 0)
        return;
    printn(i);
    System.out.println();
 
    // recursively calling pattern()
    pattern(n - 1, i - 1);
}
 

public static void main (String[] args)
{
 System.out.println("enter the values of row for creating partten : ");
 Scanner sc=new Scanner(System.in);
 int n = sc.nextInt();
    pattern(n, n);
}
    
}

    





     3.  
            1
            2 3
            4 5 6
            7 8 9 10       
          code----->>

          package homeworkrdec;

import java.util.Scanner;

public class partten3usingrecursion {
    
// function to print a row
static int print_row(int ct, int num)
{
	// base case
	if (num == 0)
		return ct;
			System.out.print(ct + " ");

	// recursively calling print_row()
	return print_row(ct + 1, num - 1);
}

// function to print the pattern
static void pattern(int n,
					int count, int num)
{
	// base case
	if (n == 0)
		return;
	count = print_row(count, num);
			System.out.println();

	// recursively calling pattern()
	pattern(n - 1, count, num + 1);
}


public static void main (String[] args)
{
	System.out.println("enter the values of row for creating partten : ");
 Scanner sc=new Scanner(System.in);
 int n = sc.nextInt();
	pattern(n, 1, 1);
}
}
  


  4.
        * 
      * * 
    * * * 
  * * * * 
* * * * *
  

  package homeworkrdec;

import java.util.Scanner;

public class partten4usingrecursion {
    
    


	static void print_space(int space)
	{
		// base case
		if (space == 0)
		{
			return;
		}
		System.out.print(" " + " ");

		// recursively calling print_space()
		print_space(space - 1);
	}

	// function to print asterisks
	static void print_asterisk(int asterisk)
	{
		// base case
		if (asterisk == 0)
		{
			return;
		}
		System.out.print("* ");

		// recursively calling print_asterisk()
		print_asterisk(asterisk - 1);
	}

	// function to print the pattern
	static void pattern(int n, int num)
	{
		// base case
		if (n == 0)
		{
			return;
		}
		print_space(n - 1);
		print_asterisk(num - n + 1);
		System.out.println();

		// recursively calling pattern()
		pattern(n - 1, num);
	}

	
	public static void main(String[] args)
	{
		System.out.println("enter the values of row for creating partten : ");
       Scanner sc=new Scanner(System.in);
       int n = sc.nextInt();
		pattern(n, n);
	}
}

5.  * 
   * * 
  * * * 
 * * * * 
* * * * * 
          
          package homeworkrdec;

import java.util.Scanner;

public class partteb5usingrecursion {



// function to print spaces
static void print_space(int space)
{
	// base case
	if (space == 0)
		return;
	System.out.print(" ");

	// recursively calling print_space()
	print_space(space - 1);
}

// function to print asterisks
static void print_asterisk(int asterisk)
{
	// base case
	if (asterisk == 0)
		return;
	System.out.print("* ");

	// recursively calling asterisk()
	print_asterisk(asterisk - 1);
}

// function to print the pattern
static void pattern(int n, int num)
{
	// base case
	if (n == 0)
		return;
	print_space(n - 1);
	print_asterisk(num - n + 1);
	System.out.println("");

	// recursively calling pattern()
	pattern(n - 1, num);
}

// Driver code
public static void main(String[] args)
{
	  System.out.println("enter the values of row for creating partten : ");
       Scanner sc=new Scanner(System.in);
       int n = sc.nextInt();
		pattern(n, n);
}
}
 

 6. 
1         
2 2       
3 3 3     
4 4 4 4   
5 5 5 5 5



code---->>


package homeworkrdec;

import java.util.Scanner;

public class partten6usingrecursion {
/*
1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5
                    */

static void print_row(int no, int val)
{
	// base case
	if (no == 0)
		return;
	System.out.print(val + " ");

	// recursively calling print_row()
	print_row(no - 1, val);
}

// function to print the pattern
static void pattern(int n, int num)
{
	// base case
	if (n == 0)
		return;
	print_row(num - n + 1, num - n + 1);
	System.out.println();

	// recursively calling pattern()
	pattern(n - 1, num);
}


public static void main(String[] args)
{
	System.out.println("enter the values of row for creating partten : ");
       Scanner sc=new Scanner(System.in);
       int n = sc.nextInt();
		pattern(n, n);
}
}
 


 7.


A 
B B 
C C C 
D D D D 
E E E E E

  code----->>


   package homeworkrdec;

import java.util.Scanner;

public class partten7usingrecursion {
    /*
A 
B B 
C C C 
D D D D 
E E E E E
           */

static void print_row(int no, int val)
{
	// base case
	if (no == 0)
		return;
	System.out.print((char)(val + 64) + " ");

	// recursively calling print_row()
	print_row(no - 1, val);
}

// function to print the pattern
static void pattern(int n, int num)
{
	// base case
	if (n == 0)
		return;
	print_row(num - n + 1, num - n + 1);
	System.out.println();

	// recursively calling pattern()
	pattern(n - 1, num);
}


public static void main(String[] args)
{
	System.out.println("enter the values of row for creating partten : ");
       Scanner sc=new Scanner(System.in);
       int n = sc.nextInt();
		pattern(n, n);
}
}


8.  
   
A 
B C 
D E F 
G H I J 
K L M N O
     

     code---->>

     package homeworkrdec;

import java.util.Scanner;

public class partten8byusingrecursion {
       /*
A 
B C 
D E F 
G H I J 
K L M N O  */
    

// function to print a row
static int print_row(int ct, int num)
{
	// base case
	if (num == 0)
		return ct;
	System.out.print((char)(ct + 64) + " ");

	// recursively calling print_row()
	print_row(ct + 1, num - 1);
	return num + ct;
	
}

// function to print the pattern
static void pattern(int n, int count, int num)
{
	// base case
	if (n == 0)
		return;
	count = print_row(count, num);
	System.out.println();

	// recursively calling pattern()
	pattern(n - 1, count, num + 1);
}


public static void main(String[] args)
{
	System.out.println("enter the values of row for creating partten : ");
       Scanner sc=new Scanner(System.in);
       int n = sc.nextInt();
	pattern(n, 1, 1);
}
}





    


    


